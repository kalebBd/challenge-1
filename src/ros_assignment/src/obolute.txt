#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <sstream> // for converting the command line parameter to integer

int main(int argc, char** argv)
{
  // Check if video source has been passed as a parameter
  if(argv[1] == NULL) return 1;

  ros::init(argc, argv, "image_publisher");
  ros::NodeHandle nh;
  image_transport::ImageTransport it(nh);
  image_transport::Publisher pub = it.advertise("camera/image", 1);

  // Convert the passed as command line parameter index for the video device to an integer
  std::istringstream video_sourceCmd(argv[1]);
  int video_source;
  // Check if it is indeed a number
  if(!(video_sourceCmd >> video_source)) return 1;

  cv::VideoCapture cap(video_source);
  // Check if video device can be opened with the given index
  if(!cap.isOpened()) return 1;
  cv::Mat frame;
  sensor_msgs::ImagePtr msg;

  ros::Rate loop_rate(5);
  while (nh.ok()) {
    cap >> frame;
    // Check if grabbed frame is actually full with some content
    if(!frame.empty()) {
      msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", frame).toImageMsg();
      pub.publish(msg);
      cv::waitKey(1);
    }

    ros::spinOnce();
    loop_rate.sleep();
  }
}



#################################################
################################################
vel_msg = Twist()
#Since we are moving just in x-axis and rotating Z-axis
vel_msg.linear.x = 0
vel_msg.linear.y = 0
vel_msg.linear.z = 0
vel_msg.angular.x = 0
vel_msg.angular.y = 0
vel_msg.angular.z = 0

def publisher(distance,vel_msg):
    # Starts a new node
    rospy.init_node('robot_cleaner', anonymous=True)
    velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
    #Setting the current time for distance calculus
    t0 = rospy.Time.now().to_sec()
    current_distance = 0
    while(current_distance < distance):
        #Publish the velocity
        velocity_publisher.publish(vel_msg)
        #Takes actual time to velocity calculus
        t1=rospy.Time.now().to_sec()
        #Calculates distancePoseStamped
        current_distance= speed*(t1-t0)
    #After the loop, stops the robot
    vel_msg.linear.x = 0
    vel_msg.angular.z = 0
    #Force the robot to stop
    velocity_publisher.publish(vel_msg)
def curveRight(distance,twist,depth):
    for i in range(depth):
        vel_msg.linear.x = speed - 5
        vel_msg.angular.z = (twist+2)*2*PI/36
        publisher(distance,vel_msg)
def curveLeft(distance,twist,depth):
    for i in range(depth):
        vel_msg.linear.x = speed - 5
        vel_msg.angular.z = -(twist+2)*2*PI/36
        publisher(distance,vel_msg)
def lineForward(distance,depth):
    for i in range(depth):
        vel_msg.linear.x = speed
        publisher(distance,vel_msg)
def lineBackward(distance,depth):
    for i in range(depth):
        vel_msg.linear.x = - speed
        publisher(distance,vel_msg)
def pattern(depth):
    if depth > 0:
        lineBackward(4,1)
        curveLeft(2,3,1)
        curveRight(2,3,1)
        curveRight(2,4,1)
        curveRight(2,2,3)
        curveLeft(2,3,2)
        curveLeft(2,6,1)
        curveLeft(2,7,2)
        lineForward(4,1)
        depth = depth - 1
        pattern(depth)
def snow(depth):
    for i in range(depth):
        lineForward(3,1)
        curveRight(3,24,3)
        curveRight(1,256,1)
def ninja(depth):
    #modulet = 0
    if depth >0:
        lineForward(2,1)
        curveLeft(2,50,2)
        lineForward(1,1)
        curveRight(1,110,1)
        lineForward(2,1)
        curveLeft(2,50,2)
        lineForward(1,1)
        curveRight(1,110,1)
        lineForward(2,1)
        curveLeft(2,50,2)
        lineForward(1,1)
        curveRight(1,110,1)
        lineForward(1,1)
        curveLeft(1,110,1)
        lineForward(1,1)
        curveRight(2,50,2)
        curveLeft(1,110,2)
        lineForward(3,1)
        level = depth - 1
        ninja(level)
def zigzag(depth):
    if depth > 0:
        curveRight(1,110,1)
        #lineForward(3,1)
        curveRight(2,30,3)
        curveLeft(2,50,3)
        curveRight(2,30,3)
        zigzag(depth - 1)
def obsolute():
    zigzag(6)
    lineForward(2,1)
    zigzag(6)
    lineBackward(3,2)
    zigzag(6)
    curveRight(2,10,2)
    lineForward(2,1)
    zigzag(6)
def clothnitt(depth):
    global count
    if count == 0:
        turtle1_set_pen(0,0,255.0,2,0)
    elif count == 1:
        turtle1_set_pen(0,255.0,0,2,0)
    elif count == 2:
        turtle1_set_pen(255.0,0,0,2,0)
    if depth > 0:
        zigzag(2)
        lineForward(2,1)
        zigzag(2)
        lineBackward(3,1)
        zigzag(2)
        curveRight(2,10,2)
        lineForward(2,1)
    	zigzag(2)
        count += 1
        clothnitt(depth - 1)
